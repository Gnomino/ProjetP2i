package fr.insalyon.p2i2.javaarduino.db;

import java.sql.*;
import java.util.HashMap;
import java.util.LinkedList;

public class MusicDatabase {
    private static Connection connection = null;
    private static HashMap<String, Note> notes = null;
    public static void initiateConnection(String host, String db, String username, String password) throws SQLException {
        connection = DriverManager.getConnection("jdbc:mysql://" + host + ":3306/" + db, username, password);
    }
    public static LinkedList<Music> getAllMusic() throws SQLException {
        LinkedList<Music> res = new LinkedList<>();
        ResultSet rs = connection.createStatement().executeQuery("SELECT * FROM Musique");
        while(rs.next()) {
            res.add(new Music(rs.getInt("idMusique"), rs.getInt("duree"), rs.getString("nom"), rs.getString("auteur")));
        }
        return res;
    }
    public static HashMap<String, Note> getAllNotes() throws SQLException {
        if(notes != null)
            return notes;
        HashMap<String, Note> res = new HashMap<>();
        ResultSet rs = connection.createStatement().executeQuery("SELECT * FROM Note");
        while(rs.next()) {
            res.put(rs.getString("nomNote"), new Note(rs.getInt("freq"), rs.getString("nomNote")));
        }
        notes = res;
        return res;
    }
    public static LinkedList<Position> getNotesForMusic(Music m) throws SQLException {
        PreparedStatement preparedStatement = connection.prepareStatement("SELECT * FROM Position, Note WHERE Position.nomNote = Note.nomNote AND Position.idMusique = ? ORDER BY Position.ordre");
        preparedStatement.setInt(1, m.getIdMusic());

        ResultSet rs = preparedStatement.executeQuery();
        LinkedList<Position> res = new LinkedList<>();
        while(rs.next()) {
            res.add(new Position(m, notes.get(rs.getString("Note.nomNote")), rs.getInt("date")));
        }
        return res;
    }
    public static int insertAttempt(Attempt a) throws SQLException {
        PreparedStatement attemptInsertStatement = connection.prepareStatement("INSERT INTO Tentative (idMusique) VALUES(?)", Statement.RETURN_GENERATED_KEYS);
        attemptInsertStatement.setInt(1, a.music.getIdMusic());
        attemptInsertStatement.executeUpdate();
        int attemptId = attemptInsertStatement.getGeneratedKeys().getInt(1);
        PreparedStatement playedNoteInsertStatement = connection.prepareStatement("INSERT INTO NoteJouee (temps, freqJouee, idTentative) VALUES(?, ?, ?)", Statement.RETURN_GENERATED_KEYS);
        for(PlayedNote playedNote : a.getPlayedNotes()) { // If the played note is not in the database yet
            if(playedNote.getIdPlayedNote() == -1) {
                playedNoteInsertStatement.setInt(1, playedNote.getTimePlayed());
                playedNoteInsertStatement.setInt(2, playedNote.getFrequency());
                playedNoteInsertStatement.setInt(3, attemptId);
                playedNoteInsertStatement.executeUpdate();
                playedNote.setIdPlayedNote(playedNoteInsertStatement.getGeneratedKeys().getInt(1));
            }
        }
        return attemptId; // Returns the idTentative generated by MySQL
    }
}
